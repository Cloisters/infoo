#!/bin/bash

# Color codes
RED="\033[1;31m"
GREEN="\033[1;32m"
WHITE="\033[1;37m"
sudo apt install toilet lolcat


# Function to display main menu
function main_menu {
  clear
  toilet -F border  Infoo | lolcat 
  echo ""
  echo -e "$GREEN[${RED}1$GREEN]${WHITE} NUMBER INFO "
  echo -e "$GREEN[${RED}2$GREEN]${WHITE} IP to Location"
  echo -e "$GREEN[${RED}3$GREEN]${WHITE} TRY your luck* "
  echo -e "$GREEN[${RED}4$GREEN]${WHITE} Quit"
}

# Function to get number information
function numfo {
  clear
  toilet -F border  Infoo | lolcat
  echo -e "${GREEN}=================== NUMBER INFO ===================${WHITE}"
  read -p "Enter phone number: "  phoneNumber
  read -p "Enter your API key: " API_KEY
  response=$(curl -s -H "apikey: $API_KEY" "https://api.apilayer.com/number_verification/validate?number=$phoneNumber")
  valid=$(echo "$response" | jq -r '.valid')
  type=$(echo "$response" | jq -r '.type')
  name=$(echo "$response" | jq -r '.name')
  location=$(echo "$response" | jq -r '.location')
  carrier=$(echo "$response" | jq -r '.carrier')
  lineType=$(echo "$response" | jq -r '.line_type')
  if [ "$valid" == "true" ]; then
    echo "Number: $phoneNumber"
    echo "Valid: $valid"
    echo "Type: $type"
    echo "Name: $name"
    echo "Location: $location"
    echo "Carrier: $carrier"
    echo "Line Type: $lineType"
  else
    echo "No information found for $phoneNumber"
    read -p "Press Enter to continue..."
  fi
}

# Function to generate API key
function Generate_API {
  clear
  toilet -F border  Infoo | lolcat
  echo -e "${GREEN}=================== GENERATE API KEY ===================${WHITE}"
  KEY_LENGTH=32
  api_urls=(
    "https://api.apilayer.com/number_verification/validate?number=14158586273&apikey="
    "https://api.apilayer.com/some_other_api?apikey="
  )
  api_key=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w "$KEY_LENGTH" | head -n 1)
  for url in "${api_urls[@]}"; do
    full_url="$url$api_key"
    echo "Checking $full_url..."
    response=$(curl -s -o /dev/null -w "%{http_code}" "$full_url")
    if [ "$response" == "200" ]; then
      echo "Status: API is online"
    else
      echo "Status: API is offline (HTTP response code $response)"
    fi
    echo

  done
  read -p "Press Enter to continue..."
}

# Function to get IP location
function ip_locate {
  clear
  toilet -F border  Infoo | lolcat
  echo -e "${GREEN}=================== IP TO LOCATION ===================${WHITE}"
  read -p "Enter an IP address: " ip_address
  response=$(curl -s "http://ip-api.com/json/$ip_address")
  status=$(echo "$response" | jq -r '.status')
  if [ "$status" == "fail" ]; then
    echo "Failed to fetch IP information. Please check your input IP address or website availability."
     else 
     country=$(echo "$response" | jq -r '.country')
    region=$(echo "$response" | jq -r '.regionName')
    city=$(echo "$response" | jq -r '.city')
    lat=$(echo "$response" | jq -r '.lat')
    lon=$(echo "$response" | jq -r '.lon')

    echo "IP Address: $ip_address"
    echo "Country: $country"
    echo "Region: $region"
    echo "City: $city"
    echo "Latitude: $lat"
    echo "Longitude: $lon"
fi

}
# main system
main_menu 
read -p "=> " choice  
  case $choice in
    1)
      numfo 
      ;;
    2)
      ip_locate
      ;;
    3)
       Generate_API 
      ;;
   4)
      echo "Goodbye!"
      exit 0
     ;;  
    *)
      echo "Invalid choice. Please try again."
      ;;
  esac


